<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go Web</title>
      <link href="/2021/10/27/go-web/"/>
      <url>/2021/10/27/go-web/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言Web开发入坑"><a href="#Go语言Web开发入坑" class="headerlink" title="Go语言Web开发入坑"></a>Go语言Web开发入坑</h1><ul><li><p>Windows下Go语言环境安装<br>  *[^_^]: (环境安装很多坑，我搞了一晚上才成功T_T)</p></li><li><p>Go语言基础语法</p><ul><li><p>递归函数</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">package mainimport "fmt"func fab(i int) int {    if i == 0 {        return 0    } else {        if i == 1 {            return 1        } else {            return fab(i-1) + fab(i-2)        }    }}func main() {    var n int    fmt.Scanln(&amp;n)    fmt.Println(fab(n))}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>延迟调用defer</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">package mainimport "fmt"func main() {    // defer最为延时调用，main函数结束之前调用，可使用多个defer（类似于堆栈结构，先进后出）    defer fmt.Println("延时输出")    fmt.Println("输出")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用图床搭建</title>
      <link href="/2021/10/25/imgurl/"/>
      <url>/2021/10/25/imgurl/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-PicGo搭建个人图床"><a href="#GitHub-PicGo搭建个人图床" class="headerlink" title="GitHub+PicGo搭建个人图床"></a>GitHub+PicGo搭建个人图床</h1><ul><li>下载PicGo</li></ul><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" title="下载地址">下载地址(需要翻墙)</a>  <a href="https://pan.baidu.com/s/1vyl9ZrwAVEQw-c5I7UmwJQ" title="下载地址">百度云下载(提取码：dnd1)</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025172003.png"></p><ul><li>创建GitHub仓库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025172548.png"></p><ul><li><p>获取Personal access tokens</p><p>  点自己头像，然后点Setting<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173236.png"></p><p>  选择Developer settings，再选择Personal access tokens.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173609.png"><br>  点击Generate new token,勾选repo,创建token.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173841.png"><br>  创建成功后，复制token(离开该页面后token无法再显示).</p></li><li><p>配置PicGo</p><p>  安装PicGo.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025174245.png"><br>  安装完成后打开图床设置，选择GitHub图床。<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025174449.png"><br>  仓库名：输入github用户名/仓库名<br>  分支名：按照github仓库内容填写<br>  Token: 复制刚才生成的Token<br>  存储路径：设置图片存储的位置，相当于文件夹<br>  设定自定义域名：</p>  <pre class="line-numbers language-demo" data-language="demo"><code class="language-demo">https://cdn.jsdelivr.net/gh/用户名/仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p> 至此，设置完成。PicGo支持多种上传方式，包括拖拽、剪贴板以及URL的方式。同时也可以设置要用的链接格式，包括Markdown、HTML、URl等多种格式。</p>]]></content>
      
      
      <categories>
          
          <category> 工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personal Homepage</title>
      <link href="/2021/10/24/personal-homepage/"/>
      <url>/2021/10/24/personal-homepage/</url>
      
        <content type="html"><![CDATA[<h1 id="个人网站新域名新样式"><a href="#个人网站新域名新样式" class="headerlink" title="个人网站新域名新样式"></a>个人网站新域名新样式</h1><p>又是一年程序员节，作为一名辣鸡Coder还是想着把自己的网站重新搞搞，本网站部署在github上，使用Hexo框架，新的一年希望自己能够多多Code！</p>]]></content>
      
      
      <categories>
          
          <category> 个人生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy 1024</title>
      <link href="/2021/10/24/happy-1024/"/>
      <url>/2021/10/24/happy-1024/</url>
      
        <content type="html"><![CDATA[<h1 id="Happy-1024"><a href="#Happy-1024" class="headerlink" title="Happy 1024"></a>Happy 1024</h1><p><img src="https://w.wallhaven.cc/full/6o/wallhaven-6ooq76.png" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/24/hello-world/"/>
      <url>/2021/10/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
