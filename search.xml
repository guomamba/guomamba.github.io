<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Electron</title>
      <link href="/2021/11/09/electron/"/>
      <url>/2021/11/09/electron/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h1><h2 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h2><p>每个 Electron 应用都有一个单一的主进程，作为应用程序的入口点。 主进程在 Node.js 环境中运行，这意味着它具有 require 模块和使用所有 Node.js API 的能力。</p><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><p>主进程的主要目的是使用 BrowserWindow 模块创建和管理应用程序窗口。</p><p>BrowserWindow 类的每个实例创建一个应用程序窗口，且在单独的渲染器进程中加载一个网页。 您可从主进程用 window 的 webContent 对象与网页内容进行交互。</p><h3 id="应用程序生命周期"><a href="#应用程序生命周期" class="headerlink" title="应用程序生命周期"></a>应用程序生命周期</h3><p>主进程还能通过 Electron 的 app 模块来控制您应用程序的生命周期。 该模块提供了一整套的事件和方法，可以使你添加自定义的应用程序行为 ( 例如：以编程方式退出您的应用程序、修改程序坞或显示关于面板 ) 。</p><h3 id="原生-API​"><a href="#原生-API​" class="headerlink" title="原生 API​"></a>原生 API​</h3><p>为了使 Electron 的功能不仅仅限于对网页内容的封装，主进程也添加了自定义的 API 来与用户的作业系统进行交互。 Electron 有着多种控制原生桌面功能的模块，例如菜单、对话框以及托盘图标。</p><p>关于 Electron 主进程模块的完整列表，参阅 API 文档。</p><h2 id="渲染器进程​"><a href="#渲染器进程​" class="headerlink" title="渲染器进程​"></a>渲染器进程​</h2><p>每个 Electron 应用都会为每个打开的 BrowserWindow ( 与每个网页嵌入 ) 生成一个单独的渲染器进程。 洽如其名，渲染器负责 渲染 网页内容。 所以实际上，运行于渲染器进程中的代码是须遵照网页标准的 (至少就目前使用的 Chromium 而言是如此) 。</p><p>因此，一个浏览器窗口中的所有的用户界面和应用功能，都应与您在网页开发上使用相同的工具和规范来进行攥写。</p><h2 id="预加载脚本​"><a href="#预加载脚本​" class="headerlink" title="预加载脚本​"></a>预加载脚本​</h2><p>预加载（preload）脚本包含了那些执行于渲染器进程中，且先于网页内容开始加载的代码 。 这些脚本虽运行于渲染器的环境中，却因能访问 Node.js API 而拥有了更多的权限。</p><h2 id="示例预览"><a href="#示例预览" class="headerlink" title="示例预览"></a>示例预览</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span>; script-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span>; script-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./render/renderer.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211115151431.png" alt="Hello World"></p><h3 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h3><p>需要使用 Notification 模块。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Notifications</span><span class="token keyword">const</span> <span class="token constant">NOTIFICATION_TITLE</span> <span class="token operator">=</span> <span class="token string">'Notification'</span><span class="token keyword">const</span> <span class="token constant">NOTIFICATION_BODY</span> <span class="token operator">=</span> <span class="token string">'Application loading completed.'</span><span class="token keyword">function</span> <span class="token function">showNotification</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token constant">NOTIFICATION_TITLE</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token constant">NOTIFICATION_BODY</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>createWindow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>showNotification<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211115152005.png" alt="Notification"></p><h3 id="Taskbar-Progress-Bar"><a href="#Taskbar-Progress-Bar" class="headerlink" title="Taskbar Progress Bar"></a>Taskbar Progress Bar</h3><p>进度条使窗口能够向用户提供其进度信息，而无需被切换到前台。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">INCREMENT</span> <span class="token operator">=</span> <span class="token number">0.03</span><span class="token keyword">const</span> <span class="token constant">INTERVAL_DELAY</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// ms</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> progressIntervalprogressInterval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// update progress bar to next value</span>  <span class="token comment">// values between 0 and 1 will show progress, &gt;1 will show indeterminate or stick at 100%</span>  mainWindow<span class="token punctuation">.</span><span class="token function">setProgressBar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">// increment or reset progress bar</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">+=</span> <span class="token constant">INCREMENT</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token constant">INCREMENT</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// reset to a bit less than 0 to show reset state</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">INTERVAL_DELAY</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/TaskbarProgressBar.gif" alt="Taskbar Progress Bar"></p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>应用键盘快捷键仅在应用程序被聚焦时触发。 为了配置本地快捷键，你需要在创建Menu模块中的MenuItem时指定accelerator属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 键盘快捷键</span><span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>menu<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  label<span class="token operator">:</span> <span class="token string">'Electron'</span><span class="token punctuation">,</span>  submenu<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    role<span class="token operator">:</span> <span class="token string">'help'</span><span class="token punctuation">,</span>    accelerator<span class="token operator">:</span> process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">'darwin'</span> <span class="token operator">?</span> <span class="token string">'Alt+Cmd+I'</span> <span class="token operator">:</span> <span class="token string">'Alt+Shift+I'</span><span class="token punctuation">,</span>    <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Shortcut key'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/shortcut.gif" alt="ShortCut"></p><h3 id="网络状态判断"><a href="#网络状态判断" class="headerlink" title="网络状态判断"></a>网络状态判断</h3><p>通过标准 HTML5 API 中 navigator.onLine 属性来实现的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 網絡狀態判斷</span><span class="token keyword">function</span> <span class="token function">updateOnlineStatus</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> navigator<span class="token punctuation">.</span>onLine <span class="token operator">?</span> <span class="token string">'online'</span> <span class="token operator">:</span> <span class="token string">'offline'</span>  <span class="token punctuation">}</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span> updateOnlineStatus<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'offline'</span><span class="token punctuation">,</span> updateOnlineStatus<span class="token punctuation">)</span>    <span class="token function">updateOnlineStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/network.gif" alt="Network"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode romanToInt</title>
      <link href="/2021/11/08/leetcode-romantoint/"/>
      <url>/2021/11/08/leetcode-romantoint/</url>
      
        <content type="html"><![CDATA[<h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h1><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><table><thead><tr><th>字符</th><th align="center">数值</th></tr></thead><tbody><tr><td>I</td><td align="center">1</td></tr><tr><td>V</td><td align="center">5</td></tr><tr><td>X</td><td align="center">10</td></tr><tr><td>L</td><td align="center">50</td></tr><tr><td>C</td><td align="center">100</td></tr><tr><td>D</td><td align="center">500</td></tr><tr><td>M</td><td align="center">1000</td></tr></tbody></table><p>例如， 罗马数字 2 写做&nbsp;II&nbsp;，即为两个并列的 1。12 写做&nbsp;XII&nbsp;，即为&nbsp;X&nbsp;+&nbsp;II&nbsp;。 27 写做&nbsp;&nbsp;XXVII, 即为&nbsp;XX&nbsp;+&nbsp;V&nbsp;+&nbsp;II&nbsp;。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;IIII，而是&nbsp;IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;IX。这个特殊的规则只适用于以下六种情况：</p><p>I&nbsp;可以放在&nbsp;V&nbsp;(5) 和&nbsp;X&nbsp;(10) 的左边，来表示 4 和 9。<br>X&nbsp;可以放在&nbsp;L&nbsp;(50) 和&nbsp;C&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;<br>C&nbsp;可以放在&nbsp;D&nbsp;(500) 和&nbsp;M&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1&nbsp;到 3999 的范围内。</p><p>来源：力扣（LeetCode）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">)</span>                result <span class="token operator">+=</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">)</span>                result <span class="token operator">+=</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span>                result <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'V'</span><span class="token punctuation">)</span>                result <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                result <span class="token operator">-=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span>                result <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                result <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">)</span>                result <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'V'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                result <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">)</span>                result <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码还得是天天写</p>]]></content>
      
      
      <categories>
          
          <category> 编程之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rainmeter</title>
      <link href="/2021/11/05/rainmeter/"/>
      <url>/2021/11/05/rainmeter/</url>
      
        <content type="html"><![CDATA[<h1 id="WIndows桌面美化工具-Rainmeter"><a href="#WIndows桌面美化工具-Rainmeter" class="headerlink" title="WIndows桌面美化工具: Rainmeter"></a>WIndows桌面美化工具: Rainmeter</h1><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>Rainmeter 是一款适用于 Windows PC 的免费开源应用程序，是能够自定义桌面皮肤的平台。</p><p>所谓皮肤，可以是很多东西。首先可以是一些非常简单的具有单一用途的工具，例如 Windows 桌面小工具或 Android 设备上的“小工具”。也可以是其他的更复杂，例如应用程序。而且一些皮肤甚至捆绑在大型“组件”中，并可以在 Rainmeter 的基本界面用于自定义其形式和外观。每个皮肤的工作方式都不同，这取决于该皮肤的创作作者。 但是，所有皮肤都由相同的模块组成：measures，从您的计算机、网站、文本文件或某些其他来源获取数据信息；meters，可以在皮肤窗口中创建视觉元素，例如框架、边框、背景、图像、文本、图表或按钮。 皮肤可以使用称作 bangs 的特殊命令与其他皮肤和应用程序交互，并且可以通过更改配置文件来自定义。 Rainmeter允许皮肤访问应用程序中内置的功能和资源。 而且每个皮肤的代码都是完全开放的，可以使用任何文本编辑软件进行调整、修改甚至完全重写。<br>此外 Rainmeter 支持创建皮肤，或修改别人提供的皮肤。无需成为专业程序员即可完成 Rainmeter 皮肤编写。其皮肤的所有基本属性都是使用一些简单配置语言编写的。难度类似于 HTML 或 JavaScript。</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>Rainmeter下载地址<a href="https://www.rainmeter.net/">官网下载地址（需要翻墙）</a><br><a href="https://pan.baidu.com/s/1mgp1k3RyirQ3-1urgnqiwA">百度云下载（提取码：hu0r）</a><br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105195914.png"></p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>选择标准安装<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105200220.png"><br>在附加选项中勾选开机运行<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105200501.png"></p><h2 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h2><p>下载自己喜欢的皮肤</p><p><a href="https://www.deviantart.com/rainmeter/gallery/23941137/skins">deviantArt(拥有最大的 Rainmeter 资源在线存储库,需要翻墙)</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105210707.png"></p><p><a href="https://www.reddit.com/r/Rainmeter/">Reddit 上的 Rainmeter 社区(需要翻墙)</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105211336.png"></p><p><a href="https://rainmeter-skins.com/category/all/">Rainmeter Skins Official RMSkins</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105205220.png"></p><p><a href="https://forum.rainmeter.net/viewforum.php?f=27">Rainmeter论坛中也有很多皮肤可供下载</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105210421.png"></p><p><a href="https://zhutix.com/tag/rainmeter/">致美化Rainmeter皮肤</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105212851.png"></p><p>下载主题对应的.rmskin文件，双击打开rmskin文件，安装所下载皮肤，应用皮肤即可。此外可以根据自己桌面调整皮肤中的相关设置。</p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105213200.png"></p><p>皮肤对应每个文件夹下都有一个对应的ini文件，可以点击ini文件切换是否加载内容，也可通过ini面板上的配置信息设置相关参数。</p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105215633.png"></p><p>设置好桌面后，可以保存相关设置信息。</p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105215128.png"></p><p>以上就是Rainmeter软件的使用教程。此外推荐一个壁纸网站。<a href="https://wallhaven.cc/">wallhaven</a>可以下载喜欢的壁纸=_=。</p><p align="right">———EDIT by <a href="https://vscode.dev/">vscode.dev</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桌面美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Web</title>
      <link href="/2021/10/27/go-web/"/>
      <url>/2021/10/27/go-web/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言Web开发入坑"><a href="#Go语言Web开发入坑" class="headerlink" title="Go语言Web开发入坑"></a>Go语言Web开发入坑</h1><h2 id="Windows下Go语言环境安装"><a href="#Windows下Go语言环境安装" class="headerlink" title="Windows下Go语言环境安装"></a>Windows下Go语言环境安装</h2><p>  *[^_^]: (环境安装很多坑，我搞了一晚上才成功T_T)</p><h2 id="Go语言基础语法"><a href="#Go语言基础语法" class="headerlink" title="Go语言基础语法"></a>Go语言基础语法</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>国际惯例-Hello World</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {  fmt.Print("Hello World!")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {  var a int  fmt.Scan(&amp;a)  fmt.Println("a =", a)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>递归函数</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func fab(i int) int {    if i == 0 {        return 0    } else {        if i == 1 {            return 1        } else {            return fab(i-1) + fab(i-2)        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>if</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func Judge() {  a := 10  if a != 0 {    println("NotZero")  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>延迟调用defer</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {    // defer最为延时调用，main函数结束之前调用，可使用多个defer（类似于堆栈结构，先进后出）。    // defer执行出错时，先执行所有defer后才报出异常。    // 含参函数defer，先进行参数传递，后执行函数    defer fmt.Println("延时输出")    fmt.Println("输出")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取命令行参数</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {  list := os.Args //获取用户传递参数，以字符串形式传递  for i, data := range list {    fmt.Println(i, data)  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/getCmdINdex.gif" alt="获取命令行参数列表"></p></li><li><p>函数传参</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main(a, b int)int {//第一个括号内是函数接收的参数，后面为函数的返回    return a + b}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用图床搭建</title>
      <link href="/2021/10/25/imgurl/"/>
      <url>/2021/10/25/imgurl/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-PicGo搭建个人图床"><a href="#GitHub-PicGo搭建个人图床" class="headerlink" title="GitHub+PicGo搭建个人图床"></a>GitHub+PicGo搭建个人图床</h1><ul><li>下载PicGo</li></ul><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" title="下载地址">下载地址(需要翻墙)</a>  <a href="https://pan.baidu.com/s/1vyl9ZrwAVEQw-c5I7UmwJQ" title="下载地址">百度云下载(提取码：dnd1)</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025172003.png"></p><ul><li>创建GitHub仓库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025172548.png"></p><ul><li><p>获取Personal access tokens</p><p>  点自己头像，然后点Setting<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173236.png"></p><p>  选择Developer settings，再选择Personal access tokens.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173609.png"><br>  点击Generate new token,勾选repo,创建token.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173841.png"><br>  创建成功后，复制token(离开该页面后token无法再显示).</p></li><li><p>配置PicGo</p><p>  安装PicGo.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025174245.png"><br>  安装完成后打开图床设置，选择GitHub图床。<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025174449.png"><br>  仓库名：输入github用户名/仓库名<br>  分支名：按照github仓库内容填写<br>  Token: 复制刚才生成的Token<br>  存储路径：设置图片存储的位置，相当于文件夹<br>  设定自定义域名：</p>  <pre class="line-numbers language-demo" data-language="demo"><code class="language-demo">https://cdn.jsdelivr.net/gh/用户名/仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p> 至此，设置完成。PicGo支持多种上传方式，包括拖拽、剪贴板以及URL的方式。同时也可以设置要用的链接格式，包括Markdown、HTML、URl等多种格式。</p>]]></content>
      
      
      <categories>
          
          <category> 工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personal Homepage</title>
      <link href="/2021/10/24/personal-homepage/"/>
      <url>/2021/10/24/personal-homepage/</url>
      
        <content type="html"><![CDATA[<h1 id="个人网站新域名新样式"><a href="#个人网站新域名新样式" class="headerlink" title="个人网站新域名新样式"></a>个人网站新域名新样式</h1><p>又是一年程序员节，作为一名辣鸡Coder还是想着把自己的网站重新搞搞，本网站部署在github上，使用Hexo框架，新的一年希望自己能够多多Code！</p>]]></content>
      
      
      <categories>
          
          <category> 个人生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy 1024</title>
      <link href="/2021/10/24/happy-1024/"/>
      <url>/2021/10/24/happy-1024/</url>
      
        <content type="html"><![CDATA[<h1 id="Happy-1024"><a href="#Happy-1024" class="headerlink" title="Happy 1024"></a>Happy 1024</h1><p><img src="https://w.wallhaven.cc/full/6o/wallhaven-6ooq76.png" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/24/hello-world/"/>
      <url>/2021/10/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
