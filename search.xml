<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>rainmeter</title>
      <link href="/2021/11/05/rainmeter/"/>
      <url>/2021/11/05/rainmeter/</url>
      
        <content type="html"><![CDATA[<h1 id="WIndows桌面美化工具-Rainmeter"><a href="#WIndows桌面美化工具-Rainmeter" class="headerlink" title="WIndows桌面美化工具: Rainmeter"></a>WIndows桌面美化工具: Rainmeter</h1><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>Rainmeter 是一款适用于 Windows PC 的免费开源应用程序，是能够自定义桌面皮肤的平台。</p><p>所谓皮肤，可以是很多东西。首先可以是一些非常简单的具有单一用途的工具，例如 Windows 桌面小工具或 Android 设备上的“小工具”。也可以是其他的更复杂，例如应用程序。而且一些皮肤甚至捆绑在大型“组件”中，并可以在 Rainmeter 的基本界面用于自定义其形式和外观。每个皮肤的工作方式都不同，这取决于该皮肤的创作作者。 但是，所有皮肤都由相同的模块组成：measures，从您的计算机、网站、文本文件或某些其他来源获取数据信息；meters，可以在皮肤窗口中创建视觉元素，例如框架、边框、背景、图像、文本、图表或按钮。 皮肤可以使用称作 bangs 的特殊命令与其他皮肤和应用程序交互，并且可以通过更改配置文件来自定义。 Rainmeter允许皮肤访问应用程序中内置的功能和资源。 而且每个皮肤的代码都是完全开放的，可以使用任何文本编辑软件进行调整、修改甚至完全重写。<br>此外 Rainmeter 支持创建皮肤，或修改别人提供的皮肤。无需成为专业程序员即可完成 Rainmeter 皮肤编写。其皮肤的所有基本属性都是使用一些简单配置语言编写的。难度类似于 HTML 或 JavaScript。</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>Rainmeter下载地址<a href="https://www.rainmeter.net/">官网下载地址（需要翻墙）</a><br><a href="https://pan.baidu.com/s/1mgp1k3RyirQ3-1urgnqiwA">百度云下载（提取码：hu0r）</a><br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105195914.png"></p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>选择标准安装<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105200220.png"><br>在附加选项中勾选开机运行<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105200501.png"></p><h2 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h2><p>下载自己喜欢的皮肤</p><p><a href="https://www.deviantart.com/rainmeter/gallery/23941137/skins">deviantArt(拥有最大的 Rainmeter 资源在线存储库,需要翻墙)</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105210707.png"></p><p><a href="https://www.reddit.com/r/Rainmeter/">Reddit 上的 Rainmeter 社区(需要翻墙)</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105211336.png"></p><p><a href="https://rainmeter-skins.com/category/all/">Rainmeter Skins Official RMSkins</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105205220.png"></p><p><a href="https://forum.rainmeter.net/viewforum.php?f=27">Rainmeter论坛中也有很多皮肤可供下载</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105210421.png"></p><p><a href="https://zhutix.com/tag/rainmeter/">致美化Rainmeter皮肤</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105212851.png"></p><p>下载主题对应的.rmskin文件，双击打开rmskin文件，安装所下载皮肤，应用皮肤即可。此外可以根据自己桌面调整皮肤中的相关设置。</p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105213200.png"></p><p>皮肤对应每个文件夹下都有一个对应的ini文件，可以点击ini文件切换是否加载内容，也可通过ini面板上的配置信息设置相关参数。</p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105215633.png"></p><p>设置好桌面后，可以保存相关设置信息。</p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211105215128.png"></p><p>以上就是Rainmeter软件的使用教程。此外推荐一个壁纸网站。<a href="https://wallhaven.cc/">wallhaven</a>可以下载喜欢的壁纸=_=。</p><p align="right">———EDIT by <a href="https://vscode.dev/">vscode.dev</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桌面美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Web</title>
      <link href="/2021/10/27/go-web/"/>
      <url>/2021/10/27/go-web/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言Web开发入坑"><a href="#Go语言Web开发入坑" class="headerlink" title="Go语言Web开发入坑"></a>Go语言Web开发入坑</h1><h2 id="Windows下Go语言环境安装"><a href="#Windows下Go语言环境安装" class="headerlink" title="Windows下Go语言环境安装"></a>Windows下Go语言环境安装</h2><p>  *[^_^]: (环境安装很多坑，我搞了一晚上才成功T_T)</p><h2 id="Go语言基础语法"><a href="#Go语言基础语法" class="headerlink" title="Go语言基础语法"></a>Go语言基础语法</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>国际惯例-Hello World</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {  fmt.Print("Hello World!")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {  var a int  fmt.Scan(&amp;a)  fmt.Println("a =", a)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>递归函数</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func fab(i int) int {    if i == 0 {        return 0    } else {        if i == 1 {            return 1        } else {            return fab(i-1) + fab(i-2)        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>if</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func Judge() {  a := 10  if a != 0 {    println("NotZero")  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>延迟调用defer</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {    // defer最为延时调用，main函数结束之前调用，可使用多个defer（类似于堆栈结构，先进后出）。    // defer执行出错时，先执行所有defer后才报出异常。    // 含参函数defer，先进行参数传递，后执行函数    defer fmt.Println("延时输出")    fmt.Println("输出")}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取命令行参数</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main() {  list := os.Args //获取用户传递参数，以字符串形式传递  for i, data := range list {    fmt.Println(i, data)  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/getCmdINdex.gif" alt="获取命令行参数列表"></p></li><li><p>函数传参</p><pre class="line-numbers language-Golang" data-language="Golang"><code class="language-Golang">func main(a, b int)int {//第一个括号内是函数接收的参数，后面为函数的返回    return a + b}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用图床搭建</title>
      <link href="/2021/10/25/imgurl/"/>
      <url>/2021/10/25/imgurl/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-PicGo搭建个人图床"><a href="#GitHub-PicGo搭建个人图床" class="headerlink" title="GitHub+PicGo搭建个人图床"></a>GitHub+PicGo搭建个人图床</h1><ul><li>下载PicGo</li></ul><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" title="下载地址">下载地址(需要翻墙)</a>  <a href="https://pan.baidu.com/s/1vyl9ZrwAVEQw-c5I7UmwJQ" title="下载地址">百度云下载(提取码：dnd1)</a></p><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025172003.png"></p><ul><li>创建GitHub仓库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025172548.png"></p><ul><li><p>获取Personal access tokens</p><p>  点自己头像，然后点Setting<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173236.png"></p><p>  选择Developer settings，再选择Personal access tokens.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173609.png"><br>  点击Generate new token,勾选repo,创建token.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025173841.png"><br>  创建成功后，复制token(离开该页面后token无法再显示).</p></li><li><p>配置PicGo</p><p>  安装PicGo.<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025174245.png"><br>  安装完成后打开图床设置，选择GitHub图床。<br><img src="https://cdn.jsdelivr.net/gh/guomamba/PicGoCDN/img/20211025174449.png"><br>  仓库名：输入github用户名/仓库名<br>  分支名：按照github仓库内容填写<br>  Token: 复制刚才生成的Token<br>  存储路径：设置图片存储的位置，相当于文件夹<br>  设定自定义域名：</p>  <pre class="line-numbers language-demo" data-language="demo"><code class="language-demo">https://cdn.jsdelivr.net/gh/用户名/仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p> 至此，设置完成。PicGo支持多种上传方式，包括拖拽、剪贴板以及URL的方式。同时也可以设置要用的链接格式，包括Markdown、HTML、URl等多种格式。</p>]]></content>
      
      
      <categories>
          
          <category> 工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personal Homepage</title>
      <link href="/2021/10/24/personal-homepage/"/>
      <url>/2021/10/24/personal-homepage/</url>
      
        <content type="html"><![CDATA[<h1 id="个人网站新域名新样式"><a href="#个人网站新域名新样式" class="headerlink" title="个人网站新域名新样式"></a>个人网站新域名新样式</h1><p>又是一年程序员节，作为一名辣鸡Coder还是想着把自己的网站重新搞搞，本网站部署在github上，使用Hexo框架，新的一年希望自己能够多多Code！</p>]]></content>
      
      
      <categories>
          
          <category> 个人生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy 1024</title>
      <link href="/2021/10/24/happy-1024/"/>
      <url>/2021/10/24/happy-1024/</url>
      
        <content type="html"><![CDATA[<h1 id="Happy-1024"><a href="#Happy-1024" class="headerlink" title="Happy 1024"></a>Happy 1024</h1><p><img src="https://w.wallhaven.cc/full/6o/wallhaven-6ooq76.png" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/24/hello-world/"/>
      <url>/2021/10/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
